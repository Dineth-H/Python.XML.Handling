# -*- coding: utf-8 -*-
"""XML Handling in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DG8JrIBfA5XzSpSvj1DKSl7T5YBybcPN
"""

import xml.etree.ElementTree as ET

vehicle_xml_data_as_string = "<motorvehicles><vehicle type='car'><registration_no>CBB1456</registration_no><make>Toyota</make><model>Premio</model></vehicle><vehicle type='van'><registration_no>PR2245</registration_no><make>Mazda</make><model>Bongo</model></vehicle></motorvehicles>"

root = ET.fromstring(vehicle_xml_data_as_string)

print("Root Tag:")
print(root.tag)

print("\nRoot Attributes:")
print(root.attrib)

print("\nIterate the children nodes:")

for child in root:
  print(child.tag, child.attrib)

print("\nAccessing by index:")
root[0][1].text

print("\nAccessing atttributes:")
for attr in root[0].attrib:
  print(attr+ "=" + root[0].attrib[attr])

print("\nSearching with Iter:")
for element in root.iter(tag='registration_no'):
  print(element.text)

print("\nSearching with findall:")
for element in root.findall('vehicle'):
  regno= element.find('registration_no').text
  make= element.find('make').text
  print(regno, make)

print("\nModifying XML:")
for element in root.iter(tag='make'):
  newmake = 'Nissan'
  element.text = newmake

print("\nSearching after modifying:")
for element in root.findall('vehicle'):
  regno= element.find('registration_no').text
  make= element.find('make').text
  print(regno, make)

print("Building XML:")
a = ET.Element('a')
b = ET.SubElement(a, 'b')
c = ET.SubElement(a, 'c')
d = ET.SubElement(c, 'd')
ET.dump(a)



#Python ElementTree library official documentation: https://docs.python.org/3/library/xml.etree.elementtree.html
#An advanced tutorial on XML processing with Python: https://realpython.com/python-xml-parser/

import xml.etree.ElementTree as ET
vehicle_xml_data_as_string = "<motorvehicles><vehicle><registration_no>CBB1456</registration_no><make>Toyota</make><model>Premio</model></vehicle><vehicle><registration_no>PR2245</registration_no><make>Mazda</make><model>Bongo</model></vehicle><vehicle><registration_no>DE2115</registration_no><make>TATA</make><model>Sumo</model></vehicle><vehicle><registration_no>CAR7785</registration_no><make>Kia</make><model>Optima</model></vehicle></motorvehicles>"

# Define the XML string
xml_string = '''<motorvehicles>
    <vehicle>
        <registration_no>CBB1456</registration_no>
        <make>Toyota</make>
        <model>Premio</model>
    </vehicle>
    <vehicle>
        <registration_no>PR2245</registration_no>
        <make>Mazda</make>
        <model>Bongo</model>
    </vehicle>
    <vehicle>
        <registration_no>DE2115</registration_no>
        <make>TATAS</make>
        <model>Sumo</model>
    </vehicle>
    <vehicle>
        <registration_no>CAR7785</registration_no>
        <make>Kia</make>
        <model>Optima</model>
    </vehicle>
</motorvehicles>'''

# Parse the XML string
root = ET.fromstring(xml_string)

# Update the details of the vehicle with registration number DE2115
for vehicle in root.findall(".//vehicle"):
    registration_no = vehicle.find("registration_no").text
    if registration_no == "DE2115":
        vehicle.find("make").text = "Nissan"
        vehicle.find("model").text = "Skyline"

# Print the Registration Numbers of each Nissan vehicle
for vehicle in root.findall(".//vehicle"):
    make = vehicle.find("make").text
    if make == "Nissan":
        registration_no = vehicle.find("registration_no").text
        print(registration_no)